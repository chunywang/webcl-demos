var sboxC =
   [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 //0
   , 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 //1
   , 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 //2
   , 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 //3
   , 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 //4
   , 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf //5
   , 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 //6
   , 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 //7
   , 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 //8
   , 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb //9
   , 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 //A
   , 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 //B
   , 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a //C
   , 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e //D
   , 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf //E
   , 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];//F
    //0      1    2      3     4    5     6     7      8    9     A      B    C     D     E     F

var rsboxC =
    [ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb
    , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb
    , 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e
    , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25
    , 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92
    , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84
    , 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06
    , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b
    , 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73
    , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e
    , 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b
    , 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4
    , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f
    , 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef
    , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61
    , 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];


var NINTS2     = NBYTES;
var KEYSIZE2   = 176
var ROUNDS2    = 10;

var text       = new Uint8Array(NINTS2);
var state      = new Uint8Array(16);
var roundKeyJS = new Uint8Array(KEYSIZE2);

var encData;
var decData;

var tStart2;
var tEnd2;

function addRoundKey(state, roundKey, round) {
    var i;
    var round;

    round *= 16;
    for (i = 0; i < 4; i++) {
        state[4*i    ] ^= roundKey[round + i*4];
        state[4*i + 1] ^= roundKey[round + i*4 + 1];
        state[4*i + 2] ^= roundKey[round + i*4 + 2];
        state[4*i + 3] ^= roundKey[round + i*4 + 3];
    }
}

function subByte(box, word, pos) {
    var i;

    word[pos    ] = box[word[pos    ]];
    word[pos + 1] = box[word[pos + 1]];
    word[pos + 2] = box[word[pos + 2]];
    word[pos + 3] = box[word[pos + 3]];
}

function sbox(box, state) {
    var i;

    for (i = 0; i < 4; i++) {
        subByte(box, state, 4*i);
    }
}

// state is a column array
function shiftRows(state) {
    var tmp;

    // first row (0 - coord x) stays the same
    // second row
    tmp            = state[1];
    state[1]       = state[4 + 1];
    state[4+1]     = state[4*2 + 1];
    state[4*2 + 1] = state[4*3 + 1];
    state[4*3 + 1] = tmp;

    // third row
    // s0 <-> s2
    tmp            = state[2];
    state[2]       = state[4*2 + 2];
    state[4*2 + 2] = tmp;
    // s1 <-> s3
    tmp            = state[4 + 2];
    state[4 + 2]   = state[4*3 + 2];
    state[4*3 + 2] = tmp;

    // last row
    tmp            = state[3];
    state[3]       = state[4*3 + 3];
    state[4*3 + 3] = state[4*2 + 3];
    state[4*2 + 3] = state[4 + 3];
    state[4 + 3] = tmp;
}

function shiftRowsInv(state) {
    var tmp;

    // first row (0 - coord x) stays the same
    // second row
    tmp            = state[4*3 + 1];
    state[4*3 + 1] = state[4*2 + 1];
    state[4*2 + 1] = state[4*1 + 1];
    state[4 + 1]   = state[1];
    state[1]       = tmp;

    // third row
    // s0 <-> s2
    tmp            = state[2];
    state[2]       = state[4*2 + 2];
    state[4*2 + 2] = tmp;
    // s1 <-> s3
    tmp            = state[4 + 2];
    state[4 + 2]   = state[4*3 + 2];
    state[4*3 + 2] = tmp;

    // last row
    tmp            = state[4*3 + 3];
    state[4*3 + 3] = state[3];
    state[3]       = state[4 + 3];
    state[4 + 3]   = state[4*2 + 3];
    state[4*2 + 3] = tmp;
}

function galoisMult(a, b) {
    var i;
    var p = 0;
    var hiBitSet;

    for(i = 0; i < 8; ++i) {
        if((b & 1) == 1) {
            p ^= a;
        }
        hiBitSet = (a & 0x80);
        a <<= 1;
        if(hiBitSet == 0x80) {
            a ^= 0x1b;
        }
        b >>= 1;
    }
    return p;
}

function mixColumns(state, coeff) {
    var i;
    var stateCopy;
    var coeff;

    stateCopy = new Uint8Array(16);
    for (i = 0; i < 16; i++) {
        stateCopy[i] = state[i];
    }

    for (i = 0; i < 4; i++) {
        stateCopy[4*i] = galoisMult(state[4*i], coeff.x) ^ galoisMult(state[4*i+1], coeff.y) ^ galoisMult(state[4*i+2], coeff.z) ^ galoisMult(state[4*i+3], coeff.w);

        stateCopy[4*i+1] = galoisMult(state[4*i], coeff.w) ^ galoisMult(state[4*i+1], coeff.x) ^ galoisMult(state[4*i+2], coeff.y) ^ galoisMult(state[4*i+3], coeff.z);

        stateCopy[4*i+2] = galoisMult(state[4*i], coeff.z) ^ galoisMult(state[4*i+1], coeff.w) ^ galoisMult(state[4*i+2], coeff.x) ^ galoisMult(state[4*i+3], coeff.y);

        stateCopy[4*i+3] = galoisMult(state[4*i], coeff.y) ^ galoisMult(state[4*i+1], coeff.z) ^ galoisMult(state[4*i+2], coeff.w) ^ galoisMult(state[4*i+3], coeff.x);
    }

    for (i = 0; i < 16; i++) {
        state[i] = stateCopy[i];
    }
}

function encryptJSInit() {
    var i;
    var j;
    var result;

    tStart2 = new Date().valueOf();

    result = [];
    for (i = 0; i < NINTS2; i += 16) {
        for (j = 0; j < 16; j++) {
            state[j] = text[i + j];
        }
        result[i/16] = encryptJS(state, roundKeyJS, ROUNDS2);
    }

    encData = result;

    tEnd2 = new Date().valueOf();
    showResults(tStart2, tEnd2, "Encryption JS", "");
}

function encryptJS(state, roundKey, rounds) {
    var r;
    var rounds;
    var coeff;
    var output;

    rounds = 10;
    coeff = {};
    coeff.x = 0x02;
    coeff.y = 0x03;
    coeff.z = 0x01;
    coeff.w = 0x01;

    /**
    * Applying AES algorithm
    **/

    //1. addRoundKey
    addRoundKey(state, roundKey, 0);

    //Rounds
    for (r = 1; r < rounds; r++) {
        //1. subytes
        sbox(sboxC, state);

        //2. shiftRows
        shiftRows(state);

        //3. mixCols
        mixColumns(state, coeff);

        //4. addRoundKey
        addRoundKey(state, roundKey, r);
    }

    //1. subBytes
    sbox(sboxC, state);

    //2. shiftRows
    shiftRows(state);

    //3. addRoundKey
    addRoundKey(state, roundKey, r);

    output = new Uint8Array(16);
    for (i = 0; i < 16; i++) {
        output[i] = state[i];
    }

    return output;
}

function decryptJSInit() {
    var i;
    var j;
    var result;

    tStart2 = new Date().valueOf();

    result = [];
    for (i = 0; i < encData.length; i++) {
        for (j = 0; j < 16; j++) {
            state[j] = encData[i][j];
        }
        result[i] = decryptJS(state, roundKeyJS, ROUNDS2);
    }

    tEnd2 = new Date().valueOf();

    console.log("Validating...");
    i = validate(result);
    if (i) {
        console.log("AES-JS Passed!");
    }
    else {
        console.error("AES-JS Fail!");
    }

    showResults(tStart2, tEnd2, "Decryption JS", "");
}

function decryptJS(state, roundKey, rounds) {
    var r;
    var rounds;
    var coeff;
    var output;

    rounds = 10;
    coeff = {};
    coeff.x = 0x0e;
    coeff.y = 0x0b;
    coeff.z = 0x0d;
    coeff.w = 0x09;

    //1. addRoundKey
    addRoundKey(state, roundKey, rounds);

    for(r = rounds - 1; r > 0; r--) {
        //1. shiftRowsInv
        shiftRowsInv(state);

        //2. sbox
        sbox(rsboxC, state);

        //3. addRoundKey
        addRoundKey(state, roundKey, r);

        //4. mixColumns
        mixColumns(state, coeff);
    }

    //1. shiftRowsInv
    shiftRowsInv(state);

    //2. sbox
    sbox(rsboxC, state);

    //3. addRoundKey
    addRoundKey(state, roundKey, 0);

    output = new Uint8Array(16);
    for (i = 0; i < 16; i++) {
        output[i] = state[i];
    }

    return output;
}

function validate(dec) {
    var i;
    var j;
    var result;

    for (i = 0; i < dec.length; i++) {
        for (j = 0; j < 16; j++) {
            if (dec[i][j] != text[16*i + j]) {
                return null;
            }
        }
    }

    return 1;
}

function initJS() {
    var i;

    for (i = 0; i < NINTS2; i++) {
        text[i] = i;
    }

    for (i = 0; i < KEYSIZE2; i++) {
        roundKeyJS[i] = i;
    }
}
